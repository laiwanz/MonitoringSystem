 # set xmake config root
IF(NOT CMAKE_CONFIG_ROOT)
	SET (CMAKE_CONFIG_ROOT /etc/cmake)
ENDIF()



# include needed files
INCLUDE (${CMAKE_CONFIG_ROOT}/function.cmake)
INCLUDE (${CMAKE_CONFIG_ROOT}/common.cmake)

# cmake required version
CMAKE_MINIMUM_REQUIRED(VERSION 3.5.1)

#set default options
#<OPTIONS-END>

# include toolchain file
IF(EXISTS ${CMAKE_TOOLCHAIN_FILE})
	INCLUDE (${CMAKE_TOOLCHAIN_FILE})
ENDIF()

#get gcc version for variable GCC_VERSION
get_gcc_version()

# set project type
SET(PROJECT_TYPE standard)

# enable cmake options
#SET(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# set compiler options
#SET(CMAKE_VERBOSE_MAKEFILE ON)
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -rdynamic")
#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -include <header-file>")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -E")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -rdynamic")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -include <header-file>")
#<FLAGS-END>

# if qt project
IF(${PROJECT_TYPE} STREQUAL Qt4 OR ${PROJECT_TYPE} STREQUAL Qt5)
	SET(CMAKE_AUTOUIC ON)
	SET(CMAKE_AUTOMOC ON)
	SET(CMAKE_AUTORCC ON)
	
	IF(${PROJECT_TYPE} STREQUAL Qt5)		
		# set qt5 componets
		LIST(APPEND LIST_QT5_COMPONENTS Widgets)
		#LIST(APPEND LIST_QT5_COMPONENTS Network)
		#LIST(APPEND LIST_QT5_COMPONENTS Qml)
		FIND_PACKAGE(${PROJECT_TYPE} COMPONENTS ${LIST_QT5_COMPONENTS} REQUIRED)
		
		# add qt5 resources
		FILE(GLOB_RECURSE QRC_FILES *.qrc)
		LIST(LENGTH QRC_FILES _FILES_COUNT)
		IF(_FILES_COUNT GREATER 0)
			QT5_ADD_RESOURCES(SOURCE_FILES ${QRC_FILES})
		ENDIF()
	ELSE()
		SET(QT_USE_QTCORE TRUE)
		SET(QT_USE_QTGUI TRUE)
		SET(QT_USE_QTSVG TRUE)
		SET(QT_USE_QTNETWORK TRUE)
		FIND_PACKAGE(${PROJECT_TYPE} REQUIRED)
	ENDIF()
ENDIF()

# set middleware directory
SET(MIDDLEWARE_ROOT "$ENV{MIDDLEWARE_ROOT}")
if(NOT MIDDLEWARE_ROOT)
	SET (MIDDLEWARE_ROOT /opt/middleware)
ENDIF ()
message(STATUS "MIDDLEWARE_ROOT = ${MIDDLEWARE_ROOT}")
SET (DIR_MIDDLEWARE_COMMON "${MIDDLEWARE_ROOT}/common")
SET (DIR_MIDDLEWARE_PLATFORM "${MIDDLEWARE_ROOT}/${BUILD_PLATFORM}")

# add common gcc configs
ADD_DEFINITIONS(-D${BUILD_PURPOSE})
#ADD_DEFINITIONS(-fopenmp)
ADD_DEFINITIONS(-Wno-deprecated)
#ADD_DEFINITIONS(-Wno-unused-variable)
#ADD_DEFINITIONS(-Wno-unused-but-set-variable)
#ADD_DEFINITIONS (-D<user-defination1> -D<user-defination2> ...)
ADD_DEFINITIONS (-Wno-stringop-truncation)
ADD_DEFINITIONS (-D_LINUX_ -D_ARM_LINUX_)
ADD_DEFINITIONS (-D_LINUX)
IF(arm9 STREQUAL ${BUILD_PLATFORM})
	ADD_DEFINITIONS(-D__STDC_FORMAT_MACROS)
	MESSAGE("__STDC_FORMAT_MACROS ON")
ENDIF()

# add special gcc configs for version 7.5 or later
IF(GCC_VERSION GREATER_EQUAL "7.5")
	MESSAGE("== HIGH GCC VERSION ${GCC_VERSION}")
	ADD_DEFINITIONS(-Wno-stringop-truncation)
	ADD_DEFINITIONS(-Wno-stringop-overflow)
	ADD_DEFINITIONS(-Wno-format-overflow)
	ADD_DEFINITIONS(-Wno-psabi)
ENDIF()

# set include directories
INCLUDE_DIRECTORIES (.)
INCLUDE_DIRECTORIES(${DIR_MIDDLEWARE_COMMON})
INCLUDE_DIRECTORIES(${DIR_MIDDLEWARE_PLATFORM}/include)
#INCLUDE_DIRECTORIES(<directory> ...)
IF(a8plus STREQUAL ${BUILD_PLATFORM})
	INCLUDE_DIRECTORIES(${ADDITIONAL_INCLUDE_DIRECTORIES})
	message("${ADDITIONAL_INCLUDE_DIRECTORIES}")
ENDIF()

# set link directories
LINK_DIRECTORIES(${DIR_MIDDLEWARE_PLATFORM}/lib)
#LINK_DIRECTORIES(<directory> ...)
IF(a8plus STREQUAL ${BUILD_PLATFORM})
	LINK_DIRECTORIES(${ADDITIONAL_LINK_DIRECTORIES})
	message("${ADDITIONAL_LINK_DIRECTORIES}")
ENDIF()

# get source subdirs
SET(SOURCE_SUBDIR_EXCLUDE .svn .git)
FILE(GLOB_RECURSE ALL_FILE RELATIVE ${CMAKE_SOURCE_DIR} *)
FOREACH (_VAR ${ALL_FILE})

	STRING(FIND ${_VAR} "/" _INDEX)
	IF(_INDEX LESS 0)
		CONTINUE()
	ENDIF()	
	STRING(REGEX REPLACE "(.*)/.*" \\1 _VAR ${_VAR})
	
	SET(APPEND_FLAG 1)
	FOREACH(_VAR_EXCLUDE ${SOURCE_SUBDIR_EXCLUDE})
		STRING(FIND ${_VAR} ${_VAR_EXCLUDE} _INDEX)
		IF(_INDEX EQUAL 0)
			SET(APPEND_FLAG 0)
		ENDIF()
	ENDFOREACH ()

	IF(APPEND_FLAG)
		LIST(FIND CMAKE_SOURCE_SUBDIR ${_VAR} _INDEX)
		IF(_INDEX LESS 0)
			LIST(APPEND CMAKE_SOURCE_SUBDIR ${_VAR})
		ENDIF()
	ENDIF()
ENDFOREACH ()
LIST(LENGTH CMAKE_SOURCE_SUBDIR _SUBDIR_COUNT)
IF(_SUBDIR_COUNT GREATER 0)
	LIST(SORT CMAKE_SOURCE_SUBDIR)
ENDIF()
MESSAGE("CMAKE_SOURCE_SUBDIR = ${CMAKE_SOURCE_SUBDIR}")

# get source files
AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR} SOURCE_FILES)
FOREACH (_VAR ${CMAKE_SOURCE_SUBDIR})
	AUX_SOURCE_DIRECTORY (${CMAKE_SOURCE_DIR}/${_VAR} SOURCE_FILES)
ENDFOREACH ()

# add target
ADD_EXECUTABLE(${TARGET_NAME} ${SOURCE_FILES})
# link libraries
TARGET_LINK_LIBRARIES(${TARGET_NAME} ssl z crypto pthread libsecure.a libplatform.a libutility.a libcbl.a libprotobuf-lite.a libnetT.a)

IF(a8plus STREQUAL ${BUILD_PLATFORM})
	LIST(APPEND LINK_LIBS rt libstdc++.a)
ENDIF()
IF(a7 STREQUAL ${BUILD_PLATFORM} OR arm9 STREQUAL ${BUILD_PLATFORM})
	LIST(APPEND LINK_LIBS boost_regex)
ENDIF()
IF(${PROJECT_TYPE} STREQUAL Qt5)
	LIST(LENGTH LIST_QT5_COMPONENTS _COMPONENTS_COUNT)
	IF(_COMPONENTS_COUNT GREATER 0)
		FOREACH (_VAR ${LIST_QT5_COMPONENTS})
			LIST(APPEND LINK_LIBS "Qt5::${_VAR}")
		ENDFOREACH ()
	ENDIF()
ENDIF()
TARGET_LINK_LIBRARIES(${TARGET_NAME} ${LINK_LIBS})
# install target
IF (DIR_MIDDLEWARE_PLATFORM)
	SET (CMAKE_INSTALL_PREFIX ${DIR_MIDDLEWARE_PLATFORM})
	INCLUDE (${CMAKE_CONFIG_ROOT}/install_bin.cmake)
ENDIF ()

set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME "PTMS")